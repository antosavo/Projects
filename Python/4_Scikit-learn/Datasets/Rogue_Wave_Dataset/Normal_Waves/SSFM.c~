
/* Split step Fourier Method */

/* This code solves the NLS equation with the split-step method
   
   dU/dx = -i(a/2)d^2U/dt^2 + (b/6)d^3U/dt^3 + ic|U|^2 U  */

#include <math.h>
#include <stdio.h>
#include <stdlib.h>

/* Definition of a function that substituting the function with its
   Fast Fourier Transform (FFT) */


void FFT(double fr[], double fi[], int m, int isign) 
{
  
	int n,nh,np,k,i,j,p,q,r; 
	double w,u,v;
	double f1,f2;
	
	// fr[] function real part
	// fi[] function imaginary part

	np = pow(2, m); //number of complex numbers

	n=np;

	nh = n/2;

/* Rearrange the data to the bit-reversed order */
	k = 1;
	for (i=0; i<n-1; i++) {
	if (i < k-1) {
	f1 = fr[k-1];
	f2 = fi[k-1];
	fr[k-1] = fr[i];
	fi[k-1] = fi[i];
	fr[i] = f1;
	fi[i] = f2;
	}
	j = nh;
	while (j < k) {
	k -= j;
	j /= 2;
	}
	k += j;
	}
/* Sum up the reordered data at all levels */
	k = 1;
	for (i=0; i<m; i++) {
	w = 0;
	j = k;
	k = 2*j;
	for (p=0; p<j; p++) {
	u = cos(w);
	v = sin(w);
	w += isign*M_PI/j;
	
	for (q=p; q<n; q+=k) {
	r = q+j;
	f1 = fr[r]*u-fi[r]*v;
	f2 = fr[r]*v+fi[r]*u;
	fr[r] = fr[q]-f1;
	fr[q] += f1;
	fi[r] = fi[q]-f2;
	fi[q] += f2;
	}
	}
	}
}

double Filter(double dt, double f, double U) 
{
  
	double U_filtered;
	double B;
	
	B=100; //THz
	
	if( fabs(f)<=(B/2)){ U_filtered = U; }
	else if( fabs(f)>(B/2) && fabs(f)<=B){ U_filtered = U*(0.5 + 0.5*cos( M_PI*( ( fabs(f) - (B/2) )/(B/2) ) ) ) ; }
	else{ U_filtered =0; }
	
	
	return U_filtered;

}
   
 /* Solving dU/dx = -i(a/2)d^2U/dt^2 + (b/6)d^3U/dt^3 + ic|U|^2 U  */

int main(void)
{
        
        double x,t,f,seed,x1,x2,r1,r2;
	double dx,dt;
	int i,j,m,nx,nt,q,r,l,kmax,N_comp;
	double beta2,beta3,gamma,U0,I,Imax,Z[5],step;
	double Ur[300000],Ui[300000],Vr[300000],Vi[300000];
	double N[300000],L,Br,Bi,Ar,Ai,Percentage_beta3,Percentage_Op,step_Tp,delta_Tp;
	double xm,tm,LD,To,xfinal,x_max,delta,delta_20,ratio;
	double Po1,Tpo1,Opo1,to1,E,H,t_avarage,Smax,fmax;
	double Po2,Tpo2,Opo2,to2;
	double P,Tp,Op,Cp,Ep,phi;
	
	
	char Intensity_name[50];
	char Amplitude_name[50];
	char Oscillation_name[50];
	char Spectrum_name[50];
	char Quasisoliton_name[50];
/* dU/dx = -i(a/2)d^2U/dt^2 + (b/6)d^3U/dt^3 + ic|U|^2 U  */

	FILE *pFile1;
        pFile1 = fopen("Input.dat","r");
	
	FILE *pFile2;
        pFile2 = fopen("trajectories.dat","w+");
	
	
	fscanf(pFile1,"%lf\n",&seed); //Reading parameters from input file

        //srand(time(NULL));
	
	//seed=2;      //seed chosen for random number
	srand(seed);
	
	fclose(pFile1);


        Percentage_beta3=1.0;
	Percentage_Op=1.0;
	
	beta2= -2.6*pow(10,-4);
	beta3= 0.0;//Percentage_beta3*4.4*pow(10,-6);
	gamma= 0.01;
	
	
        tm= 100; // time window in ps
	m= 14;    
	nt= pow(2,m); //number of time points for the FFT
	dt= tm/(nt-1); //x increment
	
       
       	FILE *File_Quasisoliton_P;
        File_Quasisoliton_P = fopen("Quasisoliton_P.dat","w+");
	
	
	Po1=20;
	to1=-5;
	
	Po2=10;
	to2=0;
	
	//phi=180;
	
	
	
	
for(l=1;l<=1;l++){	
	
	Opo1= -sqrt(-4*gamma*Po1/beta2);
	
	Tpo1= sqrt((-beta2-beta3*Opo1)/(gamma*Po1)); 
	
	
	Opo2= -sqrt(-4*gamma*Po2/beta2);
	
	Tpo2= sqrt((-beta2-beta3*Opo2)/(gamma*Po2));
	
	
	delta = beta2*Opo1 + 0.5*beta3*Opo1*Opo1 + beta3/(6*Tpo1*Tpo1);
	
	xm= 500;    // fiber length in m
	nx= pow(10,5);  //nx=pow(10,6); // number of points along the fiber
	dx= xm/(nx-1); //x increment
	
	xfinal=0;
	
	step=xm/4;
	
	Z[0]=0;
	Z[1]=100;
	Z[2]=200;
	Z[3]=500; 
	Z[4]=1000;
	Z[5]=1500;
	
	
        sprintf (Quasisoliton_name,"Quasisoliton_%i.dat",(int)Po2);
       
       	FILE *File_Quasisoliton;
        File_Quasisoliton = fopen(Quasisoliton_name,"w+");
	
	
/*Initializing Wave values on position x=0 */

	
	for(i=0; i<nt; i++)  
	{  	
	t=(i-0.5*(nt-1))*dt;
	
	//Ur[i]=sqrt(Po2)*(1+ sin(2*M_PI*5*pow(10,-4)*((double)rand()/RAND_MAX))  ); // real part of U
	//Ur[i]=sqrt(Po2)*(1+ pow(10,-4)*( (double)rand()/RAND_MAX )  ); // real part of U
	
	Restart:
	
        x1=(double)rand()/RAND_MAX ;
	 
	if(x1==0){goto Restart;}
	 
        x2=(double)rand()/RAND_MAX ;
	 
        r1=sqrt(-2*log(x1))*cos(2*M_PI*x2);
	r2=sqrt(-2*log(x1))*sin(2*M_PI*x2);
    
	Ur[i]=sqrt(Po2) + pow(10,-1.5)*r1; // real part of U
	Ui[i]=pow(10,-1.5)*r2;  // imaginary part of U
	
	//fprintf(pFile1, "%lf\t%lf\n",t,Ur[i]);
	}
	
/* Calculation of the wave for each positions */

for(q=0;q<=3;q++){
  
        x_max=Z[q];  
	
	printf("x=%lf\n",x_max);
	

      while(xfinal<=x_max)
{	
	
        xfinal+=dx;
	
	//printf("x=%lf\n",xfinal);
 
 /* N=ic|U|^2 */
	
	for(i=0; i<nt; i++)  
	{
	
	N[i]=gamma*Ur[i]*Ur[i]+gamma*Ui[i]*Ui[i];
	
	}
	  
/* FFT of U(t,x) */
  
  	FFT(Ur,Ui,m,1);
	
/* V=exp(dx*L)*FFT(U)=B*FFT(U) */
	
	for(i=0; i<nt; i++)  
	{
	  
	//f=i/(dt*nt);
	  
	if(i<(nt/2)){f=i/(dt*nt);}
	else{f= (-nt+i)/(dt*nt);}
	
	L=(beta2/2)*(2*M_PI*f)*(2*M_PI*f)+(beta3/6)*(2*M_PI*f)*(2*M_PI*f)*(2*M_PI*f);
	
	Br=cos(dx*L);
	Bi=sin(dx*L);
	
	//Vr[i]=Ur[i]*Br-Ui[i]*Bi;
	//Vi[i]=Ui[i]*Br+Ur[i]*Bi;
	
	Vr[i] = Filter(dt, f, Ur[i]*Br-Ui[i]*Bi); 
	Vi[i] = Filter(dt, f, Ui[i]*Br+Ur[i]*Bi); 
	
        //fprintf(pFile1, "%lf\t%lf\n",f,Ur[i]);
	
	}
	
/* IFFT of V */

  	FFT(Vr,Vi,m,-1);
	
	for(i=0; i<nt; i++)  
	{
	
	//t=i*dt;
	
	Vr[i] /=nt;
	Vi[i] /=nt;
	
        //fprintf(pFile1, "%lf\t%lf\n",t,Vr[i]);
	
	}
	
	
/* U(x+dx)=exp(dx*N)*IFFT(V)=A*IFFT(V) */

        for(i=0; i<nt; i++)  
	{
	
	Ar=cos(dx*N[i]);
	Ai=sin(dx*N[i]);
	
	Ur[i]=Vr[i]*Ar-Vi[i]*Ai;
	Ui[i]=Vi[i]*Ar+Vr[i]*Ai;
	
	t=(i-0.5*(nt-1))*dt;
	
	N_comp= (int)(xfinal/dx);
	
	if(t>=0 && t<=10 && N_comp%500==0 && xfinal>100)
	{
	I=Ur[i]*Ur[i]+Ui[i]*Ui[i];
	
        fprintf(pFile2, "%lf\t%lf\t%lf\n",t,xfinal,I);
	
	}
	
	}
	
}


/* Intensity and Amplitude */

        r=250*q;


        sprintf (Intensity_name,"Intensity_%i_%i.dat",(int)Po2,r);

	FILE *File_Intensity[q];
        File_Intensity[q] = fopen(Intensity_name,"w+");
	
	sprintf (Amplitude_name,"Amplitude_%i.dat",r);
	
	FILE *File_Amplitude[q];
        File_Amplitude[q] = fopen(Amplitude_name,"w+");
	
	E=0;
	H=0;
	t_avarage=0;
	Imax=0;
	

        for(i=0; i<nt; i++)  
	{
	t=(i-0.5*(nt-1))*dt;
	
	I=Ur[i]*Ur[i]+Ui[i]*Ui[i];
	
	E+=I*dt;
	
	if(I>=Imax){Imax=I;kmax=i;}
	
	fprintf(File_Intensity[q], "%lf\t%lf\n",t,I);
	
	fprintf(File_Amplitude[q], "%lf\t%lf\t%lf\n",t,Ur[i],Ui[i]);
	}
	
	fclose(File_Intensity[q]);
	
	fclose(File_Amplitude[q]);
	
	t_avarage=(kmax-0.5*(nt-1))*dt;
	
	P=Imax;
	
	Ep=0;
	
	 for(i=0; i<nt; i++)  
	{
	t=(i-0.5*(nt-1))*dt;
	
	if(t>=(t_avarage-5) && t<=(t_avarage+5)){I=Ur[i]*Ur[i]+Ui[i]*Ui[i]; Ep+=I*dt;}

	}
	
	Tp=Ep/(2*P);
	
	
/*Spextrum*/

/* FFT of U(t,x) */
  
  	FFT(Ur,Ui,m,1);
	
	sprintf (Spectrum_name,"Spectrum_%i_%i.dat",(int)Po2,r);
	
	FILE *File_Spectrum[q];
        File_Spectrum[q] = fopen(Spectrum_name,"w+");
	
	Smax=0;

        for(i=0; i<nt; i++)  
	{

	if(i<(nt/2)){f=i/(dt*nt);}
	else{f= (-nt+i)/(dt*nt);}  
	
	I=Ur[i]*Ur[i]+Ui[i]*Ui[i];
	
        if(I>=Smax){Smax=I;kmax=i;}
	  
	fprintf(File_Spectrum[q], "%lf\t%lf\t%lf\n",2*M_PI*f,Ur[i],Ui[i]);
	}
	
	if(kmax<(nt/2)){fmax=kmax/(dt*nt);}
	else{fmax= (-nt+kmax)/(dt*nt);}  
	
	Op=fmax*2*M_PI;
	
	fclose(File_Spectrum[q]);
	
/*Quasisoliton Parameters*/
	
	
	

	

	
	
	fprintf(File_Quasisoliton, "%lf\t%lf\t%lf\t%lf\t%lf\t%lf\n",q*step,t_avarage,E,P,Op,Tp);
	

	

/*Inverse FFT*/	

	FFT(Ur,Ui,m,-1);
	
	
	for(i=0; i<nt; i++)  
	{
	Ur[i] /=nt;
	Ui[i] /=nt;
	}
	

  


}


	fclose(File_Quasisoliton);
	
	
	
	fprintf(File_Quasisoliton_P, "%lf\t%lf\t%lf\n",P,Op,Tp);
	
	
	
}

	fclose(File_Quasisoliton_P);
	fclose(pFile2);




	//system ("gnuplot s_Intensity.sh"); //Use of gnuplot script
	
	system ("gnuplot s_trajectories.sh");
	
	//system ("gnuplot s_Amplitude.sh"); //Use of gnuplot script
	
	//system ("gnuplot s_Oscillation.sh"); //Use of gnuplot script
	
	//system ("gnuplot s_Spectrum.sh"); //Use of gnuplot script
	
	//system ("gnuplot s_Op_P.sh"); //Use of gnuplot script
		
	//system ("gnuplot s_Tp_P.sh"); //Use of gnuplot script
			
	//system ("gnuplot s_Tp_Op.sh"); //Use of gnuplot script

}

































 
